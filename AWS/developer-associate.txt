IAM = Gerenciamento de identidade e acesso
	É possível criar grupos para uma organização.
	É possível ter um usuário em mais de um grupo
	Não é possível ter um grupo dentro de outro grupo
	É possível ter usuário sem grupo
		
	Policy
		É possível criar políticas
		É possível inserir políticas direto no usuário
		É possível inserir políticas no grupo de usuários e consequentemente os usuários do grupo terão essas políticas
		É possível adicionar políticas de senha e autenticação em conjunto com (MFA) Multi-factor authentication (outros dispositivos).
		
	Roles
		Funciona como permissões para serviços AWS
		ex: Uma instância do EC2 recebe uma IAM Role e tenta acessar alguma informação/serviço da AWS,
			essa instância usará a IAM Role como permissão. Caso esteja certo, terá acesso.
			
	Security Tools
		Access reports > Credential Reports = Extrai um relatório de credenciais no formato csv.
		Users > User > Access Advisor = Exibe todos os serviços utilizados pelo usuário e os que ele tem acesso mas não utiliza.
			OBS: Como na AWS trabalhamos com o princípio de menor privilégio, esse relatório nos permite retirar permissões não utilizadas por um usuário.
					
EC2 = Fundamentals Instance Storage 
	É possível criar instâncias AWS configurando memória, processamento, etc...
		Uma das principais vantagens da nuvem, visto que se tivéssemos que fazer isso de maneira local, 
			o tempo seria muito superior para configurar um servidor.
	É considerado uma boa prática parar as instâncias enquanto não estiver utilizando.
	É considerado uma boa prática encerrar as instâncias caso não tenha mais utilidade, pois na nuvem tudo é descartável
	É possível criar backups antes de encerrar as instâncias.
	
	Classic ports to know
		22 = SSH (secure shell) - log into a Linux instance
		21 = FTP (File transfer protocol) - upload files using SSH
		22 = SFTP (Secure File Transfer Protocol) - upload files using SSH
		80 = HTTP - access unsecured websites
		443 = HTTPS - access secured websites
		3389 = RDP (Remote Desktop Protocol) - log into a Windows instance
	
	Grupo de Segurança (Security group) = é responsável por configurar os meios de conexões com o EC2.
		Ex: Caso a sua instância não tenha no grupo de segurança uma regra de entrada no protocolo HTTP,
			não será possível acessar a sua instância por um browser.
		É possível ter uma instância do EC2 com vários grupos de segurança, o resultado é a soma de todos eles.

EC2 = Instance Storage 		
	Elastic Block Store

		EBS Volume 
			É um volume específico para cada instância, podendo a instância estar vinculada a mais de um volume, ele pode ser utilizado para mais de uma, porém, nessa certificação isso não é considerado
			É possível ter um volume não vinculado a uma instância, pois ele não depende de uma instância para existir
			É possível manter o volume após o encerramento da instância, desmarcando a flag que é responsável por essa configuração.
			Nível gratuito: 30 GB de armazenamento EBS gratuito do tipo SSD ou SSD Magnético por mês
			É bloqueado por zona, se a zona da sua instância for X, o volume tem que ser criando na zona X para ser utilizado
			
		EBS Snapshot
			É um backup que pode ser realizado e utilizando como base para restaurar uma outra instância da mesma ou outra região.
			É possível criar um volume a partir do Snapshot realizado, para a mesma ou outra região.
			
	EC2 Image Builder
		É possível automatizar a criação de uma imagem com um sistema operacional, softwares desejados, rodar testes e criar instâncias automaticamente
		É possível fazer todo o fluxo acima porém criar a instância de forma manual.
		Deve-se atentar com a imagem que irá escolher pois algumas não são compatíveis com a instância t2.micro (gratuita)
		Deve-se atentar para fazer de forma manual pois a forma automática cria uma instância paga.
		
	EC2 Instance Store
		Tem um melhor desempenho para processamento input/output pois é diretamente no Hardware, porém é um armazenamento efêmero, onde você pode perder tudo ao parar a máquina.
		É uma boa utilizar para cache, dados temporários, buffer, conteúdos temporários.
		Não é uma boa utilizar para persistência de dados de longo prazo, como por ex um DB, use o EBS (Volume + Snapshot).
		Caso a instância falhe, o hardware também falhará
			
	AMI = Amazon Machine Image
		É possível criar uma AMI a partir de uma instância. Isso faz com que a instância iniciada a partir dessa AMI tenha todas as configurações já feitas
		
	EFS = Elastic File System
		Serviço Regional
		Só funciona com instâncias Linux EC2
		É possível utilizar o armazenamento em mais de uma região e em mais de uma instância ao mesmo tempo, diferente do EBS (Elastic Block Store)
		Ao utilizar o EFS, todas as instâncias de diferente zonas que usam o EFS, vão persistir e consumir os arquivos da mesma origem em tempo real.
		OBS: A EFS-IA tem um desconto de 92% comparada a Padrão pois quando utilizamos EFS-IA concordamos que não buscaremos os arquivos todos os dias, apenas eventualmente
		
	Amazon FSx
        Sistemas para gerenciamento de arquivos, caso não queira usar o S3 por exemplo.	
        Existem os seguintes FSx: FSx for Lustre, FSx for Windows File Server, FSx for NetApp ONTAP

    Escalabilidade 
        É a capacidade de um sistema acomodar uma carga maior, tornando o hardware mais forte ou ampliando, ou adicionando nós ampliados
        Vertical 
            Temos uma aplicação no t2.micro e alteramos para t2.large a fim de atender uma demanda maior
            Há um limite de escalonamento vertical, que é o limite do Hardware
        
    Elasticidade
        Horizontal
            Ao invés de aumentar o tamaho da instância, aumentamos a quantidade de instâncias para a aplicação
            Ao aumentar o número de instância, é considerado um escalonamento externo
            Ao diminuir o número de instância, é considerado um escalonamento
    
        High Availability (Alta disponibilidade)
            Vai de mãos dados com o dimensionamento horizontal
            Significa que vc está executando seu app em mais de uma zona de disponibilidade na AWS
            Ex: Call center em NY e Call Center em San Francisco
                Caso NY tenha um desastre, a operação de San Francisco não será afetada.
    
    Agilidade
        Os recursos estão a apenas um clique de distância. Ao invés de uma confugração nova demorar uma semana por ex, demora 10s.

        Alta disponibilidade e Escalabilidade para EC2
			
AWS Fundamentals: ELB + ASG

    Elastic Load Balancer

        Normalmente são mapeados 3 zonas diferentes com subredes a fim de ter uma disponibilidade maior.
        A configuração do servidor é feita pela AWS, porém é possível criar um Load Balancer, contudo, você será responsável pela configuração, manutenção, etc...
        Recebe uma solicitação e destibui conforme necessário. Caso uma instância esteja com problema, a solicitação será enviada a outra instância.        
    
        Health Checks
            Cruciais para saber se as instâncias estão aptas para receber requisições.
            Ele testa um endpoint específico de cada instância e caso a resposta não seja 200, o Load Balancer não irá distribuir tráfego para essa instância
    
        Application (ALB):
            Load Balancer somente para aplicações web, protocolo HTTP/HTTPS. = Camada 7
            Latência de 400 milissegundos
            É possível distribuir o balanceamento entre várias aplicações na mesma máquina (Contâineres)
            Tem suporte para HTTP/2 e WebSocket
            Suporta redirecionamento, de HTTP para HTTPS por exemplo
            É possível realizar um roteamento baseado em diferentes target groups (grupos-alvos):
                Endpoint: example.com/users - example.com/posts
                Hostname: one.example.com - other.example.com
                QueryString: example.com/users?id=123&order=false

            Ao utilizar um ALB, só é possível saber o IP do cliente através do X-Forwarded-For, que é inserido no cabeçalho do Load Balancer.
                Pois o Load Balancer recebe a solicitação do cliente e consulta a sua instância usando o IP privado dela.
        
        Network (NLB):
            Load Balancer somente para rede, protocolo TCP, TLS ou UDP. = Camada 4
            Latência de 100 milissegundos
            Permite lidar com milhões de solicitações por segundo
            Desempenho extremamente alto e a latência é muiuto menor que o ALB
            Contém um IP estático por Zona de disponibilidade e suporta IP Elástico
            Há a possibilidade de usar o NLB junto com o ALB, caso você queira aproveitar um recurso do NLB, como por exemplo ter IP estático.
    
		Gateway (GLB):
			Load Balancer voltado para IP = Camada 3 (Camada de redes para pacotes IP)
            Usa o protocolo GENEVE na porta 6081
            Única entrada e saída para todos os tráfegos
            Distribui o tráfego entre um conjunto de dispositivos virtuais no Target Group
            É utilizado a fim de ter mais segurança nos tráfegos da sua aplicação
                Ao invés do tráfego ir direto para a aplicação através de um ALB por exemplo, o tráfego vai para o GLB,
                    onde há 3 instâncias para validar Firewalls, Prevenção de Sistemas, Dectar Intrusos, Manipulação de Cargas, etc...
                Com isso, o GLB pode diminuir o tráfego dos usuários na sua aplicação ou aprovar, sendo aprovado, o tráfego vai para a aplicação.

            Target Groups para o GLB:
                Pode ser criado para instâncias EC2
                Pode ser criado com endereços de IP, porém, eles devem ser privados
        
        Stick Sessions (Session Affinity)
            Compatível com CLB e ALB
            A ideia é a seguinte: 
                    O cliente fará uma requisição para o ALB por exemplo. 
                    Após isso, o ALB redirecionará a requisição para uma instância EC2. Sendo assim, esse cliente será sempre redirecionado para a mesma instância.
                    Isso a fim de manter a sessão do usuário por exemplo.

            Para isso suceder, um cookie  é enviado como parte da solicitação dos clientes ao load balancer.
            Sendo assim, há os seguintes tipos de Cookies:
                
            - Aplication-based Cookies:
                
                Pode ser um Cookie personalizado
                    Gerado pelo target (destino) = próprio aplicativo
                    É possível atribuir quaisquer atributos personalizados pela aplicação
                    O nome do Cookie deve ser especificado para cada Target Group
                    Não podem ser nomeados como "AWSALB, AWSALBAPP ou AWSALBTG". Pois já são utilizados pelo ELB
                
                Ou pode ser um Cookie do aplicativo
                    Gerado pelo Load Balancer
                    Nome do cookie por padrão será (AWSALBAPP)

            - Duration-based Cookies:
                Gerado pelo Load Balancer
                O nome do Cookie será AWSALB para ALB, AWSELB para CLB                
                Terá um prazo de validade baseado na duração, que é gerada pela própria resposta
        
        Cross-Zone Load Balancing

            Divide as requisições para o total de instâncias independente da zona de disponibilidade.
            Ex: Há um load balancer configurado para duas zonas de disponibilidade
                A zona X contém 2 instâncias EC2 e a zona Z contém 8 instâncias.
                Com o Cross-Zone, ainda que o cliente envie 50% do tráfego por AZ, o Load Balancer dividirá para as 10 instâncias independente da AZ.
                Caso o Cross-Zone não seja habilitado ou seja desabilitado, o tráfego será enviado pras instâncias das respectivas AZ.
            
            Cross-Zone no Load Balancer:
            
                ALB
                    Está sempre ativado, não é possível desativar.
                    Não paga pela transferência de dados entre zonas

                NLB
                    Desabilitado por padrão. Porém, caso você habilite não irá pagar nada por isso.
                    Paga pela transferência de dados entre zonas caso você ative
                
                CLB
                    Desabilitado por padrão. Porém, caso você habilite não irá pagar nada por isso.
                    Não paga pela transferência de dados entre zonas caso você ative

        SSL/TLS
            TSL = Mais nova versão do SSL, significa "Transport Layer Security". (Atualmente são mais utilizados)      
            SSL = "Secure Sockets Layer"
                O certificado SSL permite que o tráfego entre o cliente e o load balancer seja criptografado durante o trânsito (in-flight encryption).
                Os certificados tem uma data de expiração que você define e devem ser renovados regularmente para garantir que sejam autênticos

                Com o Load Balancer, o usuário faz a requisição ao LB via HTPPS, uma requisição criptografada.
                Após isso, o Load Balancer faz a requisição ao back-end via HTTP, contudo, continua sendo seguro pois passa pela VPC.
                
                O Load Balancer carrega um certificado X509, que é chamado de certificado de servidor SSL ou TLS.
                É possível gerenciar os certificados usando o ACM (AWS Certificate Manager).
                É possível carregar os próprios certificados para o ACM caso deseje
                Ao adicionar um ouvinte HTTPS, deve ser especificado um certificado padrão
                É possível habilitar uma policy security para suportar versões mais antigas de SSL e TLS.
                
            SNI
                Você pode oferecer uma lista de certificados opcionais para oferecer suporte a vários domínios para os ALB e NLB
                SNI (Server Name Indication) para especificar o Hostname baseado no certificado SSL/TLS.

        Connection Draining (CLB) / Deregistration Delay (ALB/NLB)
            A idéia por trás desse conceito é que isso dará algum tempo para que as instâncias concluam a solicitação em andamento
                Os usuários tem uma conexão com um tempo para conclui-las, após o tempo determinado, as conexões são fechadas
            Entre 1 e 3600 segundos
                Por padrão, é difinido 300s, contudo, você pode desativá-lo passando zero.
             
	Auto Scaling Groups
		
        Configura automaticamente o load balancer e inicia as instâncias pré-configuradas
		
        Dynamic Scaling Policies
            Simple / Step Scaling
                Aumenta ou diminui a quantidade de instâncias de forma automática baseado na configuração de um alarme
                    ex: Trigger de Alarme do CloudWatch com uso superior a 70% da CPU, adiciona duas instâncias.
                        Trigger de Alarme do CloudWatch com uso inferior a 30% da CPU, remove uma instância.
                        
            Target Tracking Scaling
                Ex: Quero que a média do uso da CPU das instâncias fique em torno de 40%. O ASG fará isso automaticamente
                
            Scheduled Scaling
                Escalonamento programado é quando vc sabe que em um determinado dia o número de acessos irá aumentar por um fator, e consequentemente quer que o n° de instâncias aumente
                    Ex: Quinta-feira terá um jogo importante de um campeonato e o sistema receberá muitas apostas. Sendo assim, nesse dia a partir das 17hrs o ASG criará mais 5 instâncias EC2
            
            Predictive Scaling
                Usa os padrões de tráfego da máquina para prever o que acontecerá com base nos padrões anteriores

AWS Fundamentals: RDS + Aurora + ElastiCache

    RDS
        Serviço para criar bancos de dados relacionais na AWS os quais serão gerenciados pela AWS.
        Databases: Postgres, MySQL, MariaDB, Oracle, SQL Server, Aurora (AWS Proprietary database) 

			Benefícios ao utilizar um RDS
				Provisionamento automático, manutenções no sistema operacional
				Backups contínuos podendo especificar um período para restaurar o banco
				Painéis de Monitoramento para ver como o Banco de Dados está
				Ler réplicas a fim de melhorar a performance
				Multi zonas a fim de estar pronto para ter um plano de recuperação em caso de desastre
				Configurar janelas de manutenção para atualizações
				Capacidade de Escalabilidade (Vertical e Horizontal)
				EBS Volume (gp2 ou io l)
                Podem ter 5 réplicas

			Malefícios
				Não é possível utilizar o SSH na instância

            Réplicas de Leitua
                Caso o fluxo de leitura do banco seja grande, réplicas do BD para leituras são criadas a fim de não sobrecarregar o BD.
                Sendo assim, as réplicas serão utilizadas para leitura e o BD para persistência.
                Há um limite de 5 réplicas de leitura
            
            Multi-AZ
                A persistência e leitura serão feitas sempre no BD Master, porém as réplicas serão atualizadas a fim de estartem prontas para o uso caso a Master falhe
                Será criado um Failover DB a fim de atender a demanda quando o DB falhar por algum motivo, 
                    Os databases contém o mesmo DNS.
                O Failover DB fica numa AZ diferente, por isso é chamado de crozz AZ.
            
            Multi-Region
                São criadas réplicas de leitura para regiões diferentes do BD.
                A persistência será feita sempre no BD
                A leitura será feita baseada na região, o que melhora a latência visto que cada região acessará aos dados da sua região.
                Caso uma região falhe, outras regiões estarão ativas para receber as solicitações de leitura, e a operação terá sobrevivido ao desastre.
                Porém, tem um custo um pouco superior.

            Network Cost
                Replicas na mesma região não tem custo
                Replicas em regiões distintas tem custo

            From Single-AZ to Multi-AZ
                Não é preciso parar o database para mudar de Single-AZ para Multi-AZ.
        
    AuroraDB 
            Aurora DB não é um banco de dados open source, é fornecido pela AWS, suporta os tipos (PostgreSQL e MYSQL)
            Benefícios: 
                É otimizado para a nuvem, tem um ganho de desempenho em 5x ao MySQL no RDS e 3x ao PostgreSQL no RDS
                O armazenamento aumenta de forma automática em incrementos de 10gb até 128tb.
                Pode ter até 15 réplicas
                A disponibilidade é maior pois é nativo da nuvem
                Armazena 6 cópias de dados sempre que qualquer coisa é escrita em 3 AZ.
                    Somente 4 cópias são necessárias para escrita
                    Somente 3 cópias são necessárias para leitura
                    Se tiver algum dado corrompido, ele faz um Self Healing com replicação peer-to-peer
                    Contém centenas de volumes (Não é possível administrar)
                    Também contém 1 instância Master para persistência
                        Caso a instância Master falhe, demorará menos de 30s em média para efetuar um failover.

            Malefícios: 
                É 20% mais caro que o RDS, porém acaba valendo a pena por ser mais otimizado caso seu banco de dados seja MySQL ou PostgreSQL.

            Features:
                Automatic fail-over
                Backup and Recovery
                Isolation and Security
                Industry and Compliance
                Push-button scaling
                Automated Patchjing with Zero Downtime
                Advanced Monitoring
                Routine Maintenance
                Backtrack: restore data at any point of time without using backups

            Aurora DB Cluster
                É possível configurar o escalonamento automático
                O Master é acessado por um DNS, e em caso de falha, não terá efeito pois ocorrerá o failover
                Disponibiliza Reader Endpoints
                    Ajuda ao load balancer de conexão e se conecta automaticamente a todas as réplicas lidas
                    O load balacing acontece em nível de conexão e não de declaração
            
            RDS e Aurora Security
                At-rest Encryption
                    Master e replicas criptografando utilizando AWS KMS
                    Se você não encriptou um banco de dados Master, não poderá encriptar as réplicas
                    Para encriptar um banco de dados existente, deverá encriptar o volume e restaurar o BD

                In-flight Encryption
                    Para cada banco de dados, o Aurora está pronto para ter criptografia em vôo por padrão.
                    Por isso, os clientes devem utilizar os certificados TLS da AWS.
                
                IAM Autentication
                    IAM Roles para conectar no banco de dados

                Security Groups
                    Controlar acessos a rede do seu RDS/AuroraDB
                
                No SSH Avaliable
                    Como é um serviço gerenciado pela AWS, não tem acesso SSH, em exceção ao serviço personalizado RDS da AWS.

                Audit Logs
                    Pode ser habilitado e enviar logs para o CloudWatch Logs para Auditoria   

    ElastiCache
        Da mesma forma que o RDS tem banco de dados relacionais gerenciados, o ElastiCache vai ajudá-lo a obter
            Redis ou Memcached, que são tecnologias de cache.
        São altamente performáticos e com baixa latência
        Ajuda a reduzir a leitura intensiva no banco de dados
        Ajuda a tornar a aplicação Stateless (Sem estado)
        Totalmente gerenciado pela AWS.

        Redis
            Permite fazer várias AZ com failover automático
            As réplicas de leitura são usadas para dimensionar as leituras e também tem alta disponibilidade
            Há durabilidade de dados graças à persistência
            Contém recursos de backup e restauração

        Redis Cluster: 
            Mode Disabled
                Contém um nó primário podendo ter até 5 réplicas
                Replicação assíncrona
                O primeiro nó é usado para leitura e escrita
                Os demais nós são usadaos somente para leitura
                Todos os nós contém os mesmos dados
                Um nó de leitura pode tornar-se principal caso o nó principal falhe
                Multi-AZ, habilitado por default para failover
                Dimensiona o desempenho de leitura

            Mode Enabled
                Os dados são particionados e compartilhados (Ajuda a escalar persistência)
                Cada partição pode conter até 5 réplicas
                Multi-AZ
                Mais de 500 nós por Cluster
                    - 500 compartilhados com um único master
                    - 250 compartilhados com um master e 1 replica
                    - 83 compartilhados com um master e 5 réplicas
        
        Memcached
            Usa multi nós para particionar dados (Fragmentação).
            Não há alta disponibilidade (Replicação)
            Não é um cache persistente
            Não há backup
            A restauração é multi-encadeada, portanto, contém várias instâncias trabalhando juntas no cache com alguma fragmentação

    Elasticache Strategies
        
        Lazy Loading / Cache-Aside / Lazy Population
            Faz uma requisição ao ElastiCache, caso não tenha o dado em cache, fará uma requisição ao RDS e depois persistirá em cache
            
            Pros:
                Somente dados solicitados serão persistidos no banco em Cache
                Se o cache for limpo ou ter uma falha no nó, não será fatal. Apenas aumentará a latência

            Contra:
                Se houver falta de cache, haverá 3 chamadas de rede sendo feitas da apicação ao ElastiCache
                Os dados podem tornar-se obsoletos, caso os dados no RDS sejam atualizados, não será no Elasticache
                
        Write Through
            Adiciona ou atualiza o cache quando o RDS é atualizados
            Persiste no Database através do ElastiCache

            Pros:
                Os dados nunca serão obsoletos
                Para persistir precisará somente de 2 chamadas

            Contra:
                Falta de dados até que o RDS seja atualizado ou adicionado
                Haverá muitos dados em cache. Contudo, pode ser que nunca sejam lidos
        
        Cache Evictions and Time-to-live (TTL)
            
            Tem um tamanho limitado. Portanto, pode haver algo chamado de Cache Eviction (Despejo de cache).

            Cache Evictions (Pode ocorrer por 3 formas)
                Se Você deleta um item explicito no cache
                Se a memória do cache estiver cheia
                Definirmos um tempo de vida útil do item ou TTL (Time-to-live)

            TTL
                Muito útil para qualquer tipo de dados (Tabela de classificação, comentários, fluxos de atividades, etc)
                Dependendo da aplicação pode variar de alguns segundos
                É muito curto, até horas ou dias.

Route 53

    É o único serviço da AWS com disponibilidade de 100%
    
    É um DNS (Domain Name System) gerenciado
		O browser faz uma requisição http, porém antes de chegar no servidor, o DNS chega no Route53, que retorna o IP correto para a aplicação
			Após isso, a requisição é feita no servidor correto.

        Um DNS contém algumas terminologias
            Registro de Domínio: AWS, GoDaddy, etc...
            DNS Records: A, AAAA, CNAME, NS, ...
            Zone File: Contém DNS Records
            Nomes de Servidores: Resolvem as consultas DNS (Authoritative or Non-Authoritative)
            Top level: .com, .com.br, .net
            Second Level Domain (SLD): amazon.com, google.com

    Record Types
        A - mapeia um hostname pra IPv4
        AAAA - mapeia um hostname pra IPv6
        CNAME - mapeia um hostname em outro hostname
            O hostname pode ser um A ou AAAA.
            Não é possível criar um CNAME record pro topo do nó de um DNS namespace. (Zone Apex)
                Ex: Não é possível criar pra example.com, mas é possível criar para www.example.com
        NS - Name Servers para a Hosted Zone

    TTL (Time to Live)
        
        Hight TTL - e.g., 24hr
            Less traffic on Route53
            Possibly outdated records

        Low TTL - e.g., 60sec
            More traffic on Route 53 ($$)
            Records are outdated for less time
            Easy to change records

    Alias
        Trabalha com domínios root e não root.
        É possível registrar um domínio dentro de outro domínio independente se é root ou não
        Contém Health Check nativo
        Gratuito

        Record Targets
            ELB
            CloudFront
            API Gateway
            Elastic Beanstalk
            S3 websites
            VPC Interface Endpoints
            Global Accelerator
            Route 53 Record
        
    Routing Policy
        
        Política de Roteamento simples
            Não possui health checks
            O browser faz uma requisição e o DNS chega no Route53 e retorna o ip correto
            Caso tenha múltiplos valores no mesmo record, todos serão retornados mas um será escolhido aleatoriamente.
            Quando Alias é habilitado, só é possível ter um record
        
        Política de roteamento ponderado
            Permite distribuir o tráfego em várias instâncias EC2 com base em % do peso
            Só pode conter records com o mesmo nome e tipo

        Política de roteamento de Latência
            Havendo uma aplicação global (Com no mínimo duas instâncias), o Route53 encaminhará o usuário para o servidor mais próximo a fim de diminuir a latência

        Política de Roteamento de Failover
            Havendo uma requisição, o Route53 validará a saúde da instância primária, caso não esteja ok, redirecionará a requisição para a instância de Failover.

        Política de roteamentoto de geolocalização
            Diferente de roteamento de Latência
            O roteamento é baseado na localização do usuário
            Deve ser criado um registro padrão para caso não haja match no local
        
        Política de roteamentoto de geoproximidade
            É realmente útil quando necessário transportar usuário de uma região para outra, aumentando o viés
            Há a possibilidade de definir qual região o usuário irá acessar

        Multi-Value
            Utilizado para rotear o tráfego para vários recursos e rotas, consequentemente retorna vários valores e recursos
            Contém apenas 8 registros de health-checks para cada registro
            Não substitui um ELB


        Traffic FLow
            Permite criar um flow de tráfego de DNS com alta complexidade

VPC Fundamentals
    
    VPC (Virtual Private Cloud)
        Rede privada para construir seus recursos
            (É um recurso Regional)
    
    Subnets
        Sub redes que permitem particionar a rede dentro da VPC 
            (São definidas na Zona de Disponibilidade)
        
        Public Subnet
            É uma subnet pública acessível pela internet

        Private Subenet
            É uma subnet que não pode ser acessada pela internet
    
    Internet Gateway & NAT Gateway

        Internet Gateway
            Ajuda a instância VPC se conectar com a internet
            subnets públicas contém uma rota para o Internet Gateway

        NAT Gateways
            Ajuda a instância VPC se conectar com a internet se mantendo privada
            São provisionados e dimensionados pela AWS, o que nos isenta de qualquer configuração
            Para utilizar, basta implementá-lo numa subnet pública e criar uma rota na subnet privada para o NAT.
    
    NACL, SG, VPC Flow Logs

        Network ACL & Security Groups

            Network ACL
                É um firewall que controla o tráfego da e para a subnet.
                São atachados no nível da subnet
                As regras incluem somente números de IP

            Security Group
                Funciona como um Firewall que controla da e para um ENI / EC2 instância
                Só permite rules
                Rules incluem endereço de IP e também outros security groups.

        VPC Flow Logs

            Captura informações sobre tráfego de IP nas interfaces.
                VPC Flow Logs
                Subnet Flow Logs
                Elastic Network Interface Flow Logs

            Ajuda a monitorar e solucionar problemas de conectividades
                Subnets pra internet
                Subnetes pra subnets
                Internet pra subnets

            Capture informações dos serviços AWS pela interface como:
                Elastic Load Balancer
                ElastiCache
                RDS
                Aurora
                Etc...
    
    VPC Peering, Endpoints, VPN, DX
        
        VPC Peering
            Conecta duas VPC usando AWS Network
                OBS: Consegue conectar de duas contas diferentes, ou duas regiões diferentes.
            Os endereços de IP's precisam ser diferentes para que não se sobreponham
            A conexão não é transitiva. Portanto, deve ser estabelecida por cada VPC.
    
        VPC Endpoints
            Funciona para comunicar as instâncias EC2 que tem VPC com outros serviços AWS de forma segura.
                OBS: Traz como benefício uma latência menor.
            
            VPC Endpoints Gateway 
                Possibilita a comunicação de uma subnet privada com serviços AWS.
                    Para utilizar, basta configurar para os serviços desejados

            VPC Endpoint Interface
                É utilizado dentro de subnet privada para comunicar com serviços como por ex, CloudWatch.

        Site to Site VPN & Direct Connect                

            O objetivo é conectar algo on-premises VPN para a AWS.

            Site to Site VPN
                Conecta on-premises na VPC VPN na AWS.
                A conexão é criptografada automaticamente
                Passa pela internete pública

            Direct Connect
                Estabelece uma conexão entre o servidor on-premises e a AWS diretamente
                A conexão é privada, segura e rápida
                Passa pela internet privada
                Demora cerca de um mês para ser estabelecida

Amazon S3

    É Global, mas ao criar um Bucket, você deve selecionar uma AZ.
    Pode ser utilizado para qualquer tipo de armazenamento.
    Alguns serviços da AWS utilizam o S3 para fazer armazenamento, como por exemplo o Snapshot do EC2, ele grava seu backup no EC3.
    Normalmente, o S3 é utilizado para guardar arquivos
    Qualquer tipo de arquivo no S3 é considerado um objeto
    O S3 trabalha com buckets, podendo ter subpastas. Porém, cada arquivo é considerado um objeto, sendo ignorado qualquer tipo de subpastas.
    
    Website
        Pode ser utilizado para sites estáticos, basta configurar o bucket.
    
    Server Access Logging
        É possível configurar um bucket para receber logs de um outro bucket.
        Isso ajuda a avaliar se estão tentando invadir uma aplicação, etc...
        
    Replication
        É obrigatório ativar o versionamento de ambos os buckets que farão parte da replicação
        É possível replicar um bucket para outro bucket, independente da AZ.
        A replicação é feita de maneira assíncrona, e um dos motivos para existir a replicação é abaixar a latência.
        Ex: Se uma pessoa mora na Europa, faz mais sentido ela acessar aos arquivos de um bucket que esteja na Europa.
            Caso ela more na América Latina, faz mais sentido ela acessar aos arquivos da respectiva AZ.
        
        Deve ser configurado ou criado uma Role para o S3 a fim de realizar a replicação.
        
    Durability and Avaliability
    
        Durabilidade
            Os objetos tem uma durabilidade de 99.99999999%, ou seja, se você tem 10mm objetos, você perderá um único objeto a cada 10 mil anos
        
        Disponibilidade
            Tempo que o serviço fica disponível
            O S3 é gratuito e deve ficar em média de 53 minutos off por ano, dependendo da class de armazenamento (Storage Class).
        
    Storage Classes
    
        É possível fazer a movimentação dos objetos entre as classes de armazenamento (storage classes)
            OBS: A movimentação pode ser automatizada usando a configuração de ciclo de vida.
    
        1° S3 Standard - General Purpose
            99.99% disponibilidade
            Usado para dados acessados com frenquência
            Baixa latência e alto rendimento
            Pode sustentar até duas falhas simultâneas nas instalações (Portanto, se houver problemas, seus dados ainda estarão seguros).
            Casos de Uso (Big data, app móveis e de jogos, distribuição constante)
        
        2° S3 Standard-Infrequent Access (IA)
            99.99% disponibilidade
            O custo é menor comparado ao Padrão do S3.
            É utilizado quando você quer ter acesso rápido aos seus arquivos, porém não os acessa constantemente.
            Pode sustentar até duas falhas
            Casos de uso (Armazenamento de dados para recuperação de desastres, backups para acessar imediatamente porém não acessados com frequência.)
        
        3° S3 One Zone-Infrequent Access (IA)
            Mesma regra do S3 Standard-Infrequent Access, porém é limitado apenas para uma zona.
            Tem 99.5% de disponibilidade
            Valor inferior em até 20% comparado ao S3 Standard-Infrequent Access
            Casos de uso (Backup secundário, dados que possam ser recriados)
        
        4° S3 Intelligent Tiering
            99.99% disponibilidade
            Mesma latência e rendimento do S3 Standard
            Custo otimizado visto que de forma automática os arquivos mais acessados e menos acessados serão movidos automaticamente para as categorias certas.
            Resistentes a eventos que afetarão uma AZ inteira
        
        5° Amazon Glacier e Amazon Glacier Deep Archive
            Utilizada para guardar backups para um longo tempo
            Existem várias opções de recuperação de tempo e taxas sempre que recuperar
        
            Amazon Glacier (Barato)
                Expedited (1 a 5 minutos)
                Standard (3 a 5 horas)
                Bulk (5 a 12 horas)
            
            Amazon Glacier Deep Archive
                É a opção de armazenamento mais barata da AWS
                Standard (12 horas)
                Bulk (48 horas)
                
    S3 Object Lock & Glacier Vault Lock
        
        Object Lock
            Adotado o modelo WORM (Write Once Read Many).
            Bloqueia a versão do objeto para não ser deletado ou modificado num período especificado.
        
        Glacier Vault Lock
            Adotado o modelo WORM (Write Once Read Many).
            Cria uma política de bloqueio e essa política impede futuras edições do arquivo 
            OBS: A política é imutável, depois de configurada, ninguém poderá excluí-la.			 
            Casos de uso (Quando vc tem requisitos de conformidade e retenção de dados, ou seja, não quer perder de forma alguma um objeto - Auditoria)
    
    Criptografia
        
        Sem criptografia
            Não há criptografia em ambos os lados (cliente e servidor)
        
        Com criptografia no servidor
            O usuário não envia o arquivo criptografado, porém o servidor do bucket criptografa ao receber.
            
        Criptografia no lado do usuário
            A criptografa é feita tanto pelo usuário quanto pelo servidor.
            
    AWS Snow Family
    
        Snowcone
            Storage Capacity: 8 TB usable
            Migration Size: Up to 24tb, online and offline
            DataSync agent: Pre-Installed
            
        Snowball Edge Storage Optimized
            Storage Capacity: 80 TB usable
            Migration Size: Up to petabytes, offline
            Storage Clustering: Up to 15 nodes
            
        Snowmobile
            Storage Capacity: < 100 PB
            Migration Size: Up to exabytes, offline
            
    AWS Storage Cloud Native Options
        
        É uma forma de utilizar o local junto com a nuvem
        
        Block
            Usa o EBS e EC2 Instance Store
            
        File
            Usa o Amazon EFS
            
        Object
            Usa o S3 e Glacier

AWS CLI, SDK, IAM Roles & Policies

    IAM Roles e Policies

        IAM Role
    		Funciona como permissões para serviços AWS
            ex: Uma instância do EC2 recebe uma IAM Role e tenta acessar alguma informação/serviço da AWS,
                essa instância usará a IAM Role como permissão. Caso esteja certo, terá acesso.

        IAM Policies
            É possível criar políticas
            É possível inserir políticas direto no usuário
            É possível inserir políticas no grupo de usuários e consequentemente os usuários do grupo terão essas políticas
            É possível adicionar políticas de senha e autenticação em conjunto com (MFA) Multi-factor authentication (outros dispositivos).

        AWS Policy Generator
            Recurso da AWS que coopera na criação de policies, você especifica as configurações e ele retorna o JSON.

        AWS Policy Simulator
            Recurso da AWS que possibilita realizar testes de policies

        AWS CLI Dry Runs
            Alguns serviços da AWS contém o comando --dry-run no CLI, ele realiza chamadas de API para testar policies.
                Caso algum recurso não tenha permissão, será informado. Caso contrário, ignorado.
                Ex: aws ec2 run-instances --dry-run --image-id ami-12091312 --instance-type t2.micro

        AWS CLI STS Decode Errors
            Quando ocorre uma requisição e falha, podemos identificar uma mensagem de erro
                A mensagem pode ser decodificada usando o STS command line
                    Ex: aws sts decode-authorization-message --encoded-message ENCRYPTMESSAGE
            Para isso, é necessário habilitar a policy de STS no IAM.

        AWS EC2 Instance Metadata
            Faz com que a instância EC2 aprenda sobre si sem usar uma IAM Role pra isso.
            Metadata = Info sobre a instância EC2
            Userdata = launch script of the EC2 instance
             
            Ex: curl http://169.254.169.254/latest/meta-data/
                Retornarão diversas informações sobre a instância EC2.
                AMI-ID
                Hostname
                PROFILE
                etc...

        AWS CLI Profiles
            Configura diferentes contas no CLI ao utilizar o --profile.

        AWS CLI com MFA
            Para utilizar CLI com MFA, é necessário utilizar o STS GetSession Token.
            Ex: aws sts get-session-token --serial-number arn-of-the-mfa-device --token-code code-from-token --duration-seconds 3600

        AWS SDK (Software Development Kit)
            Utilizado para programar e integrar com serviços da AWS
            A região default é us-east-1.

        AWS Limits (Quotas)

            API Rate Limits
                Quantidade de vezes que você pode chamar uma API da AWS em uma linha.
                Ao receber erro de intermitência, implemente Exponential Backoff.
                Ao ultrapassar o limite de forma consistente, deve ser solicitado o aumento do limite de aceleração da API.

            Service Quotas (Service Limits)
                Cotas de serviço, que são quantos recursos podemos executar de algo.
                    Ex: Instâncias On-Demand Standard rodando: 1152 vCPU                
                        Você pode solicitar um serviço para incrementar limite abrindo um ticket
                        Você pode solicitar um serviço para incrementar cota através do Service Quotas API

            Expoential Backoff (Any AWS Service)
                Usamos quando obtemos um ThrottlingExcepction.
                    Ou seja, quando os erros começam com 5xx.
                Quando os erros são 4xx, não deve ser implementado o Backoff, pois significa que algo foi enviado errado pelos clientes
                O Backoff dobra o tempo para solicitação.
                    Ex: Primeira requisição, 1s. Segunda requisição, 2s. Terceira requisição, 4s. etc...
                
        AWS CLI Credntials Provider Chain

            Ordenação de prioridades do AWS CLI
                Linha de comando, opções: --region --output, and --profile
                Variáveis de ambiente: AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY e AWS_SESSION_TOKEN
                Arquivos de credenciais CLI: AWS CONFIGURE credentials
                Arquivos de configuração CLI: AWS CONFIGURE config
                Credenciais de Container: ECS Tasks
                Credenciais de perfil de Instância: EC2
            
        AWS Signature v4 Signing

            Serviço para assinar as requisições feitas à AWS com as credenciais.

Advanced Amazon S3

    Lifecycle Rules

        Transition Actions
            Configura objetos para serem transacionados entre classes de armazenamento
            Ex: Move objetos para a classe Standard IA após 60 dias de criado
                Move para classe Glacier para arquivamento após 6 meses

        Expiration Actions
            Configura objetos para serem deletados depois de um tempo determinado
            Ex: Acessa log de arquivos para deletar arquivos com mais de 365 dias
            Pode ser usado para deletar versões antigas de arquivos (Se o versinamento estiver habilitado)
            Pode ser usado para deletar Multi-Parts incompletas
        
        Rules podem ser criadas para um certo prefixo
            Ex: s3://mybucket/mp3/*
        
        Rules pode ser criado para um objeto com tag
            Ex: Department:Finance

    S3 Event Notifications
        Serviço que possibilita invocar alguns serviços da Amazon, como por Ex: SNS, SQS e Lambda.

    S3 Event Notifications with Amazon EventBridge
        Envia todos os eventos para o Amazon EventBridge e lá pode ser enviado para diversos serviços da AWS
        Filtro avançado com regras em JSON (metadata, object size,, name...)
        Múltiplos destinos - Step Functions, Kinesis Streams, Firehose...
        EventBridge Capabilities - Archive, Replay Events Reliable delivery

    S3 Performance
        
        Baseline Performance
            A latência em média das requisições no Amazon S3 é de 100-200ms
            Uma aplicação pode efetuar 3500 PUT/COPY/POST/DELETE e 5000 GET/HEAD por segundo por prefixo no bucket
                Obs: Não há limite de prefixos no bucket

            Exemplo:
                bucket/folder1/sub1/file => /folder1/sub1/ - 3500 / 5000
                bucket/folder1/sub2/file => /folder1/sub2/ - 3500 / 5000
        

        Multi-Part Upload
            Recomendado para arquivos com mais de 100MB e deve ser usado para arquivos com mais de 5GB.
            Paralela os uploads e ajuda a acelerar as transferências para maximizar a largura de banda
            O arquivo é dividido em partes e após ser feito o upload, o S3 juntará todos num único arquivo

        S3 Transfer Acceleration
            Um arquivo é enviado para um Edge Location usando a internet pública, e em seguida é enviado para o bucket específico usando a internet privada da AWS.
            Compatível com Multi-Part upload

        S3 Byte-Range Fetches
            GETs em paralelo para buscar específicos bytes ranges
            Ao invés de baixar um arquivo inteiro na AWS, o arquivo é baixado por N partes.
            Melhor resiliência em casos de falha
            Pode ser usado para downloads mais rápidos
            Pode ser usado para buscar somente partes de um arquivo, por ex o head de um arquivo
            
        S3 Select & Glacier Select
            Só funciona com arquivos que estão na Classe de Armazenamento Glacier
            A Amazon afirma que é 400% mais rápido e 80% mais barato usar o S3 Select.
            Você consegue buscar dados específicos usando linguagem SQL
            Pode filtrar por linhas e colunas
            Reduz a transferência na rede e o custo de CPU do cliente

Amazon S3 Security

    S3 Encrypton
        
    S3 CORS(Cross-Origin Resource Sharing)
        Anotation: It's a Cross-Origin from API for example, when we allow verbs HTTP for example: GET, PUT, DELETE...
        
        Origin = scheme(protocol) + host(domain) + port
            example: https://www.example.com (implied port is 443 for HTTPS, 80 for HTTP)
        
        Same Origin:
            https://www.example.com/app1 & https://www.example.com/app2

        Different Origins:
            https://www.example.com & https://www.other.example.com
        
        In AWS S3, the CORS is similar about the next example:
            A web browser does a get request to bucket, with website static, and that bucket return a link from other bucket
            So, if the second bucket has configured with CORS, the first bucket will can get that image specified.
            At other bucket do u have to configure the policy to received request from that specifed bucket
                And into principal bucket, do you have to configure the permissions to bucket can does request with CORS

    S3 MFA Delete
        To use MFA Delete, versioning must be enabled on the bucket
        Only the bucket owner (root account) can enable/disable MFA Delete
        It is a MFA Authenticator, and is required to:
            Permanently delete an object version
            Suspend versioning on the bucket

        Won't required to:
            Enable versioning
            List deleted versions
        
    S3 Access Log
        For audit purpose, you may want to log all access to S3 buckets
        Any request made to S3, from any account, authorized or denied, will be logged into another S3 bucket
        That data can be analyzed using data analysis tools
        The target logging bucket must be in the same AWS Region
    
        S3 Access Logs: Warning
            Don't set your logging bucket to be the monitored bucket
            It will create a logging loop, and your bucket will grow exponentially

    S3 Pre-Signed URLs
        Generate pre-signed URLs using the S3 Console, AWS CLI or SDK
        URL Expiration:
            S3 Console - 1 min up to 720 mins (12 hours)
            AWS CLI - Configure expiration with --expires-in parameter in seconds (default 3600 secs, max. 604800 secs - 168 hours)
        Users given a pore-signed URL inherit the permissions of the user that generated the URL for GET/PUT

    S3 Access Points
         We have some users from specifed market.
         For ex, user from finance, sales and analytics
         So, the Users from Finance, has a policy to read and write alone that finance prefix
            It's the same rule to others users from differents markets
          
        Access Points simplify security management for S3 buckets
        Each Access Point has:
            - its own DNS name (Internet Origin or VPC Origin)
            - an access point policy (similar to bucket policy) - manage security at scale

        S3 - Access Points - VPC Origin
            We can define the access point to be accessible only from within the VPC
            You must crate a VPC endpoint to access the Access Point (Gateway or Interface Endpoint)
            The VPC endpoint policy must allow access to the target bucket and Access Point
    
    S3 Object Lambda
        Use AWS Lambda Functions to change the object before it is retrieved by the caller application
        Only one S# bucket is needed, on top of wich we create S# Access Point and S3 Object Lambda Access Points.
        
CloudFront (CDN)
    Contém pontos de presença a fim de guardar cache de uma instância, site estático, objetos no S3, etc...
    Ao receber uma solicitação HTTP, caso o ponto de presença não contenha aquela informação no cache, buscará no destino.
        Antes da resposta voltar ao usuário, o CloudFront guardará essa informação no cache.
    Contém proteção a ataques DDoS, pois é global
    Baseado em:
        Headers
        Session Cookies
        Query String Parameters
    Pode aumentar ou diminuir o tempo de cache (Min- 0 sec. Max- 1 year)
    Pode invalidar parte do cache usando CreateInvalidation API
    Pode ser usado diretamente a uma instância EC2(instância pública) ou a um ALB que acessa ao EC2(privado).
    Usa criptografia assimétrica (É criptografado no Edge Location, descriptografado na aplicação)
    É possível definir uma Allow list ou Block list de países que podem acessar ou não
    É possível ter grupos de origens (Isso faz com que caso a Primary Origin falhe, a request seja direcionada para a origin B)
    É possível redirecionar requisições baseadas no endpoint
        Ex: ....api/... (Será enviado para o ALB)
            ..../... (Será enviado para o S3 ou parará no cache)

    CloudFront Signerd URL x S3 Pre-Signed URL

        CloudFront Signerd URL:
            A conta contém chave e valor, somente o root pode gerenciá-la
            Pode ser filtrado por Ip, path, data, expiração
            Contém cache
        
        S3 Pre-Signed URL: 
            Emite a requisição por uma pessoa pré-assinada na URL
            Ciclo de vida limitado
            Usa chave IAM

    Key Groups
        Nova maneira de criar chaves públicas e privadas para acessar endpoints

    Prices:
        1- Price Class All: all regions - best performance
        2- Price Class 200: most regions, but excludes the most expensive regions
        3- Price Class 100: only the least expensive regions
    
ECS, ECR & Fargate

    Auto Scaling
        Incrementa ou retira automaticamente o número de tasks

        Amazon ECS Auto Scaling uses AWS Application Auto Scaling
            ECS Service Average CPU Utilization
            ECS Service Average Memory Utilization - Scale on RAM
            ALB Request Count Per Target - metric coming from ALB

        Target Tracking - Baseado no valor de uma métrica específica do CloudWatch
        Step Scaling - Baseado no valor de um CloudWatch Alarme
        Scheduled Scaling - Baseado numa data específica

        ECS Service Auto Scaling (task level) != EC2 Auto Scaling (EC2 instance level)

    EC2 Auto Scaling
        Auto Scaling Group Scaling
            Scale your ASG based on CPU Utilization
            Add EC2 Instances over time

        ECS Cluster Capacity Provider
            Usado para provisionar e escalar a infraestrutura das task de forma automática

    Rolling Updates
        É a forma como o ECS desliga as tasks para criar novas
        Você pode definir uma porcentagem mínima e máxima de tasks.
                Ex: Min 50%, Max 100%
                    Caso tenha uma alteração, serão retiradas de forma gradativa para ter tasks rodando enquanto novas são provisionadas.
                    4 tasks rodando (V1)
                    Assim que eu implanto a V2, duas tasks V1 são finalizadas, outras duas V2 são iniciadas
                    Ao garantir que a task V2 está ok, as outras duas V1 são finalizadas e outras duas V2 serão iniciadas.
                    Garantindo dessa forma a atualizção da versão de todas as tasks.

                    OBS: Se o mínimo fosse 100% e o máximo 150%, duas novas intâncias seriam inicializadas, completando o total de 6, pois 2 equivale a 50% de 4.
                        Porém, depois as tasks voltariam para 100% e retirariam as duas versões V1
    
    ECS Tasks Definitions
        São metadados em JSON para o ECS conseguir rodar um container docker
        Ao criar uma Task Definition e vincular ela a uma ECS Task Role, todos os serviços criados baseados na Task Definition terão a role vinculada
        O container tem informações cruciais, como por exemplo:
            Nome da imagem
            Porta do container e host
            Memoória e CPU requerida
            Variáveis de ambiente
            Informações de rede
            IAM Role
            Configuração de Log (Ex CloudWatch)

    ECS Environment Variables
        Environment Variable
            Hardcoded - e.g., URL
            SSM Parameter Store - Variáveis como por ex (API Keys, shared configs)
            Secrets Manager - variáveis como por ex (DB Password)

        Environment Files (Bulk)
            Amazon S3
     
     ECS Data Volumes
        Compartilha dados entre múltiplos containêres na mesma Task Definition
        Funciona com EC2 e Fargate(Com dados efêmeros - duração de vida baseado no contâiner)

    ECS Tasks Placement
        Ao ser inicializado uma task do tipo EC2, ECS deve determinar onde coloca-lo, com restrições (constraints) de CPU, memória e porta disponível.
        - A mesma coisa ocorre quando um serviço precisa escalar, ECS precisa determinar qual task encerrar.
        - Para auxiliar nesse processo, você pode definir um "task placement strategy" ou "task placement constraints". Dessa forma irá guiar onde o container será lançado ou removido.
        - Observação: apenas para ECS com EC2, e não Fargate.

        Processo de Task Placement
            Quando um ECS precisa executar tasks, ele utiliza o seguinte processo para selecionar as instâncias do container:
            1. Identificar as instâncias que satisfazem os requisitos de CPU, memória e porta no Task definition.
            2. Identificar as instâncias que satisfazem o task placement constraints (restrições).
            3. Identificar as instâncias que satisfazem o task placement strategies.

        Tipos de estratégias de Task Placement

            1. Binpack
                - Coloca tasks baseada na menor quantidade disponível de CPU ou memória, contanto que possua disponível a CPU ou memória necessária para executar a task.
                - Minimiza o número de instâncias em uso (cost savings).

                Ex: "placementStrategy":[{
                    "field":"memory",
                    "type":"binpack"
                }]

            2.  Random
            - Coloca a task aleatoriamente em instâncias EC2.
            
            3. Spread
            - Coloca a task de forma uniforme baseado no valor especificado.
                Exemplo:  zona e disponibilidade, para alta disponibilidade.

        Task Placement Constraints (restrições)

            distinctInstance: coloca cada task em uma instância de container diferente.

            memberOf: coloca tasks em instâncias que satisfazem uma expressão, utilizando Cluster Query Language.

        EKS (mazon Elastic Kubernertes Service)
            Forma de gerenciar cluster kubernertes na AWS
            É similar ao ECS, porém é open-source e consequentemente multi-cloud
            Casos de uso: Quando você está migrando um projeto on promises ou de outro provedor de nuvem para a AWS. Ou quer desenvolver descentralizando dos serviços limitados ao provedor da nuvem.

            Node Types
                Managed Node Groups:
                    Criado e gerenciado (Instâncias EC2) pela aws pra você
                    São partes do ASG gerenciado pelo EKS
                    Suporta On-Demand e instâncias Spots

                Self-Managed Nodes
                    Você precisa criar os nós e registrá-los a um cluster EKS
                    Pode ser utilizado a AMI - Amazon EKS Optimized AMI para otimizar o processo
                    Suporta On-Demand e instâncias Spots
                
            Data Volumes
                Precisa especificar a StorageClass no cluster EKS
                Suporte para:
                    Amazon EBS
                    Amazon EFS (Works with Fargate)
                    Amazon FSx for Lustre
                    Amazon FSx for NetApp ONTAP